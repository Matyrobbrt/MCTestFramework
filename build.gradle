plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.0'
group = 'com.matyrobbrt.testframework' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'testframework'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    locator {}
    lang {}

    client {
        compileClasspath += main.output
        compileClasspath += main.compileClasspath
    }
    main {
        resources {
            srcDir 'src/generated/resources'
        }
        compileClasspath += lang.output
    }
    test {
        compileClasspath += lang.output
    }
}

configurations {
    langImplementation.extendsFrom(minecraft)
    locatorImplementation.extendsFrom(minecraft)
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.20-1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        configureEach {
            property 'forge.test.id', 'examplemod'
            mods {
                examplemod {
                    source sourceSets.main
                    source sourceSets.test
                    source sourceSets.client
                }
            }
        }
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {
}

tasks.register('langJar', Jar) {
    it.from(sourceSets.lang.output)
    it.manifest {
        attributes([
                "Specification-Title"     : "testframeworklang",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : 'testframeworklang',
                "Implementation-Version"  : project.jar.archiveVersion,
                'FMLModType'              : 'LANGPROVIDER'
        ])
    }
    it.archiveBaseName.set('lang')
}

tasks.register('locatorJar', Jar) {
    it.from(sourceSets.locator.output)
    it.manifest {
        attributes([
                "Specification-Title"     : "testframeworklocator",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : 'testframeworklocator',
                "Implementation-Version"  : project.jar.archiveVersion,
        ])
    }
    it.archiveBaseName.set('locator')
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.7'

    testCompileOnly sourceSets.main.output

    runtimeOnly(files(
            tasks.locatorJar.archiveFile.get().asFile,
            tasks.langJar.archiveFile.get().asFile
    ))
}

tasks.configureEach {
    if (it.name == 'prepareRunClient') {
        it.dependsOn('locatorJar', 'langJar')
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
